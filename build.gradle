plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "3.0"
}

group = 'com.matestodolocura'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	cucumberRuntime {
		extendsFrom testImplementation
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'io.cucumber:cucumber-java:6.8.1'
	testImplementation 'io.cucumber:cucumber-java8:6.8.1'
	testImplementation 'io.cucumber:cucumber-junit:6.8.1'
}

test {
	useJUnitPlatform()
}

task cucumber() {
	dependsOn assemble, testClasses
	doLast {
		javaexec {
			main = "io.cucumber.core.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/test/resources']
		}
	}
}

task acceptanceTest(type: Test) {
	include '**/acceptance/**'
	systemProperties System.getProperties()
}

test {
	exclude '**/acceptance/**'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.2
			}
		}
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

sonarqube {
	properties {
		property("sonar.host.url", "http://localhost:9000")
		property("sonar.sources", "src/main/")
		property("sonar.tests", "src/test/")
		property("sonar.exclusions", "src/generated/")
		property("sonar.jacoco.reportPath", "build/jacoco/test.exec")
		property("sonar.junit.reportsPath","build/test-results/test")
		property("sonar.core.codeCoveragePlugin","jacoco")
		property("sonar.verbose", "true")
		property("sonar.binaries" ,"build/classes/java")
		property("sonar.java.binaries" ,"build/classes/java")
		property("sonar.dynamicAnalysis", "reuseReports")
	}
}

plugins.withType(JacocoPlugin) {
	tasks["test"].finalizedBy 'jacocoTestReport'
}
